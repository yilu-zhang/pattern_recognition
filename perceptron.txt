1、perceptron_features.txt文件内容
0 0 0 0
0 1 0 0 
0 1 0 1
0 1 1 0
1 0 0 1
1 0 1 1
1 0 1 0 
1 1 1 1

2、运行结果如下
C:\Users\yiluzhang\AppData\Local\Programs\Python\Python38\python.exe E:/postgraduate/code/python38/pattern_recognition/main.py
The features is:
[0, 0, 0, 1]
[1, 0, 0, 1]
[1, 0, 1, 1]
[1, 1, 0, 1]
[0, 0, -1, -1]
[0, -1, -1, -1]
[0, -1, 0, -1]
[-1, -1, -1, -1]

The W(0) is:[1. 1. 1. 1.]. The rho is:1.

The iterative process is:
k=0, d(X1)=W(0)*X1=1.0, W(1)= W(0)=[1. 1. 1. 1.]
k=1, d(X2)=W(1)*X2=2.0, W(2)= W(1)=[1. 1. 1. 1.]
k=2, d(X3)=W(2)*X3=3.0, W(3)= W(2)=[1. 1. 1. 1.]
k=3, d(X4)=W(3)*X4=3.0, W(4)= W(3)=[1. 1. 1. 1.]
k=4, d(X5)=W(4)*X5=-2.0, W(5)= W(4)+1*X5=[1. 1. 0. 0.]
k=5, d(X6)=W(5)*X6=-1.0, W(6)= W(5)+1*X6=[ 1.  0. -1. -1.]
k=6, d(X7)=W(6)*X7=1.0, W(7)= W(6)=[ 1.  0. -1. -1.]
k=7, d(X8)=W(7)*X8=1.0, W(8)= W(7)=[ 1.  0. -1. -1.]
k=8, d(X1)=W(8)*X1=-1.0, W(9)= W(8)+1*X1=[ 1.  0. -1.  0.]
k=9, d(X2)=W(9)*X2=1.0, W(10)= W(9)=[ 1.  0. -1.  0.]
k=10, d(X3)=W(10)*X3=0.0, W(11)= W(10)+1*X3=[2. 0. 0. 1.]
k=11, d(X4)=W(11)*X4=3.0, W(12)= W(11)=[2. 0. 0. 1.]
k=12, d(X5)=W(12)*X5=-1.0, W(13)= W(12)+1*X5=[ 2.  0. -1.  0.]
k=13, d(X6)=W(13)*X6=1.0, W(14)= W(13)=[ 2.  0. -1.  0.]
k=14, d(X7)=W(14)*X7=0.0, W(15)= W(14)+1*X7=[ 2. -1. -1. -1.]
k=15, d(X8)=W(15)*X8=1.0, W(16)= W(15)=[ 2. -1. -1. -1.]
k=16, d(X1)=W(16)*X1=-1.0, W(17)= W(16)+1*X1=[ 2. -1. -1.  0.]
k=17, d(X2)=W(17)*X2=2.0, W(18)= W(17)=[ 2. -1. -1.  0.]
k=18, d(X3)=W(18)*X3=1.0, W(19)= W(18)=[ 2. -1. -1.  0.]
k=19, d(X4)=W(19)*X4=1.0, W(20)= W(19)=[ 2. -1. -1.  0.]
k=20, d(X5)=W(20)*X5=1.0, W(21)= W(20)=[ 2. -1. -1.  0.]
k=21, d(X6)=W(21)*X6=2.0, W(22)= W(21)=[ 2. -1. -1.  0.]
k=22, d(X7)=W(22)*X7=1.0, W(23)= W(22)=[ 2. -1. -1.  0.]
k=23, d(X8)=W(23)*X8=0.0, W(24)= W(23)+1*X8=[ 1. -2. -2. -1.]
k=24, d(X1)=W(24)*X1=-1.0, W(25)= W(24)+1*X1=[ 1. -2. -2.  0.]
k=25, d(X2)=W(25)*X2=1.0, W(26)= W(25)=[ 1. -2. -2.  0.]
k=26, d(X3)=W(26)*X3=-1.0, W(27)= W(26)+1*X3=[ 2. -2. -1.  1.]
k=27, d(X4)=W(27)*X4=1.0, W(28)= W(27)=[ 2. -2. -1.  1.]
k=28, d(X5)=W(28)*X5=0.0, W(29)= W(28)+1*X5=[ 2. -2. -2.  0.]
k=29, d(X6)=W(29)*X6=4.0, W(30)= W(29)=[ 2. -2. -2.  0.]
k=30, d(X7)=W(30)*X7=2.0, W(31)= W(30)=[ 2. -2. -2.  0.]
k=31, d(X8)=W(31)*X8=2.0, W(32)= W(31)=[ 2. -2. -2.  0.]
k=32, d(X1)=W(32)*X1=0.0, W(33)= W(32)+1*X1=[ 2. -2. -2.  1.]
k=33, d(X2)=W(33)*X2=3.0, W(34)= W(33)=[ 2. -2. -2.  1.]
k=34, d(X3)=W(34)*X3=1.0, W(35)= W(34)=[ 2. -2. -2.  1.]
k=35, d(X4)=W(35)*X4=1.0, W(36)= W(35)=[ 2. -2. -2.  1.]
k=36, d(X5)=W(36)*X5=1.0, W(37)= W(36)=[ 2. -2. -2.  1.]
k=37, d(X6)=W(37)*X6=3.0, W(38)= W(37)=[ 2. -2. -2.  1.]
k=38, d(X7)=W(38)*X7=1.0, W(39)= W(38)=[ 2. -2. -2.  1.]
k=39, d(X8)=W(39)*X8=1.0, W(40)= W(39)=[ 2. -2. -2.  1.]
k=40, d(X1)=W(40)*X1=1.0, W(41)= W(40)=[ 2. -2. -2.  1.]

The optimal W is:[ 2. -2. -2.  1.]

Process finished with exit code 0

3、main.py代码如下
import perceptron as pt

if __name__ == '__main__':
    pt.perceptron(1)

4、perceptron.py代码如下
import numpy as np


def read_features_from_file(filename):
    print("The features is:")
    features = []
    with open(filename) as f:
        for line in f.readlines():
            line_feature = [int(x) for x in line.split()]
            if line_feature[0] == 0:
                line_feature.pop(0)
                line_feature.append(1)
            else:
                line_feature.pop(0)
                line_feature = [x * -1 for x in line_feature]
                line_feature.append(-1)
            print(line_feature)
            features.append(line_feature)
    return np.array(features)


def perceptron(rho):
    features = read_features_from_file("perceptron_features.txt")
    f_num = features.shape[0]
    dimen = features.shape[1]
    weight = np.ones(dimen)
    print("\nThe W(0) is:"+str(weight)+". The rho is:"+str(rho)+".\n")

    correct_cnt = 0
    iter_cnt = 0
    print("The iterative process is:")
    while correct_cnt < f_num:
        x_index = iter_cnt % f_num
        result = np.dot(weight, features[x_index])
        if result > 0:
            weight = weight
            correct_cnt = correct_cnt + 1
            print("k=" + str(iter_cnt) + ", " + "d(X" + str(x_index + 1) + ")=" + "W(" + str(
                iter_cnt) + ")*X" + str(x_index + 1) + "=" + str(result) + ", W(" + str(
                iter_cnt + 1) + ")= W(" + str(iter_cnt) + ")=" + str(weight))

        else:
            weight = weight + rho * features[x_index]
            correct_cnt = 0
            print("k=" + str(iter_cnt) + ", " + "d(X" + str(x_index + 1) + ")=" + "W(" + str(
                iter_cnt) + ")*X" + str(x_index + 1) + "=" + str(result) + ", W(" + str(
                iter_cnt + 1) + ")= W(" + str(iter_cnt) + ")+" + str(rho) + "*X" + str(x_index + 1) + "=" + str(weight))
        iter_cnt = iter_cnt + 1
    print("\nThe optimal W is:" + str(weight))
